sec01. 중첩 클래스
특정 클래스만 관계를 맺을 경우에는 <중첩 클래스>로 선언하는 것이 유지보수에 도움이 되는 경우가 많음.
중첩 클래스란? 클래스 내부에서 선언한 클래스를 말함. 
장점. 클래스의 멤버를 쉽게 사용할 수 있고 외부에는 중첩 관계 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있음.

중첩 클래스는 선언하는 위치에 따라 두 가지로 분류. (class B가 중첩 클래스)
  1. 멤버 클래스 - 클래스의 멤버로서 선언되는 중첩 클래스
    1> 인스턴스 멤버 클래스
      1) 선언 위치
        [public] class A{
          [public] | private] class B { --- }   //인스턴스 멤버 class B
        }
        
      2) 객체 생성 조건
        A객체를 생성해야만
        B객체를 생성할 수 있음.
        
      3) 접근 제한자에 따른 접근 범위 - 인스턴스 멤버 클래스 B는 주로 A 클래스 내부에서 사용되므로 private 접근 제한을 갖는 것이 일반적. 
        public class B {}   - 다른 패키지에서 B 클래스를 사용할 수 있음.
        class B {}          - 같은 패키지에서만 B 클래스를 사용할 수 있음.
        private class B {}  - A 클래스 내부에서만 B 클래스를 사용할 수 있음.
        
        B 객체는 A 클래스 내부 어디에서나 사용할 수는 없고, 인스턴스 필드 값, 생성자, 인스턴스 메소드에서 생성할 수 있음.
        
        만약, B 객체를 A 클래스 외부에 생성하려면 default, public 접근 제한을 가져야 함.
        A 객체를 먼저 생성한 다음 B 객체를 생성해야 함.
        - 생성 방법
          A a = new A();
          A.B b = a.new B();
        A 객체가 있어야 B 객체도 생성할 수 있기 때문.
        
        인스턴스 멤버 클래스 B 내부에는 일반 클래스와 같이 필드, 생성자, 메소드 선언이 올 수 있음
        
    2> 정적 멤버 클래스
      1) 선언 위치
        [public] class A {
          [public | private] static class B { --- }   //정적 멤버 class B
        }
        
      2) 객체 생성 조건
        A객체를 생성하지 않아도
        B객체를 생성할 수 있음
        
      3) 접근 제한자에 따른 접근 범위 - 정적 멤버 클래스 B는 A 클래스 내부에서 사용되기도 하지만, A 클래스 외부에서 A와 함께 사용되는 경우가 많기 때문에 주로 default, public 접근 제한을 갖는 것이 일반적.
        public static class B {}   - 다른 패키지에서 B 클래스를 사용할 수 있음.
        static class B {}          - 같은 패키지에서만 B 클래스를 사용할 수 있음.
        private static class B {}  - A 클래스 내부에서만 B 클래스를 사용할 수 있음.
        
        B 객체는 A 클래스 내부 어디든 객체를 생성할 수 있음.
        
        만약, A클래스 외부에서 B 객체를 생성하려면 A 객체 생성 없이 A클래스로 접근해서 B 객체를 생성할 수 있음.
          A.B b = new A.B();
          
        정적 멤버 클래스 B 내부에는 일반 클래스와 같이 필드, 생성자, 메소드 선언이 올 수 있음
  
  2. 로컬 클래스 - 생성자 또는 메소드 내부에서 선언되는 중첩 클래스
    1)선언 위치
      class A {
        void method() {
          class B { --- }
        }
      }
    2) 객체 생성 조건 - 생성자와 메소드가 실행될 동안에만 객체를 생성할 수 있음.
      method가 실행할 때만
      B객체를 생성할 수 있음
      
    로컬 클래스 B 내부에는 일반 클래스와 같이 필드, 생성자, 메소드 선언이 올 수 있음. 정적 필드와 정적 메소드는 Java 17부터 선언이 가능.
    
    로컬 변수(생성자 또는 메소드의 매개변수 또는 내부에서 선언된 변수)를 로컬 클래스에서 사용할 경우 로컬 변수는 final 특성을 갖게 되므로 값을 읽을 수만 있고 수정할 수 없게 됨.
 
중첩 클래스도 하나의 클래스이기 때문에 컴파일하면 바이트코드 파일(.class)이 별도로 생성
멤버 클래스일 경우 바이트코드 파일의 이름
  A $ B .class
  
로컬 클래스일 경우 바이트코드 파일의 이름
  A $1 B .class
  
sec05. 바깥 멤버 접근
중첩 클래스는 바깥 클래스와 긴밀한 관계를 맺으면서 바깥 클래스의 멤버에 접근 할 수 있음.
하지만, 중첩 클래스가 어떻게 선언되었느냐에 따라 접근 제한이 있을 수 있음.
  
바깥 클래스의 멤버 접근 제한
인스턴스 멤버 클래스 - 바깥 클래스의 모든 필드와 메소드.
정적 멤버 클래스 - 바깥 클래스의 정적 필드와 정적 메소드.
정적 멤버 클래스는 바깥 객체가 없어도 사용 가능해야 하므로 바깥 클래스의 인스턴스 필드와 인스턴스 메소드는 사용하지 못함.

바깥 클래스의 객체 접근 
중첩 클래스 내부에서 this는 해당 중첩 클래스의 객체를 말함. 만약 중첩 클래스 내부에서 바깥 클래스의 객체를 얻으려면 바깥 클래스 이름에 this를 붙여주면 됨.
- 문법
  바깥클래스.this >>> 바깥 객체

sec06. 중첩 인터페이스
중첩 인터페이스는 클래스의 멤버로 선언된 인터페이스.
class A {
  [public | private] [static] interface B {
    //상수 필드
    //추상 메소드
    //디폴트 메소드
    //정적 메소드
  }
}

public - 외부의 접근을 막지 않음.
private - A 클래스 내부에서만 사용.
접근 제한자 X - 같은 패키지 안에서만 접근이 가능.
static - A 객체 없이 B 인터페이스를 사용할 수 있도록 하기 위해.

sec07. 익명 객체
익명 객체란? 말 그대로 이름이 없는 객체.
장점. 명시적으로 클래스를 선언하지 않기 때문에 쉽게 객체를 생성할 수 있음.

익명 객체는 필드 값, 로컬 변수 값, 매개 변수 값으로 주로 사용.

익명 객체는 클래스를 상속하거나 인터페이스를 구현해야만 생성할 수 있음.

1. 익명 자식 객체 - 클래스를 상속해서 만들 경우.
  부모 클래스를 상속받아 생성, 부모 타입의 필드, 로컬 변수, 매개변수의 값으로 대입할 수 있음.
- 문법
  new 부모생성자( 매개값, ---) {
    //필드
    //메소드
  }
중괄호 블록 안의 필드와 메소드는 익명 자식 객체가 가져야 할 멤버로, 중괄호 블록 안에서만 사용할 수 있음.
익명 자식 객체는 부모 타입에 대입되므로 부모 타입에 선언된 멤버만 접근할 수 있기 떄문.
중괄호 블록 안에는 주로 부모 메소드를 재정의하는 코드.

2. 익명 구현 객체 - 인터페이스를 구현해서 만들 경우.
  인터페이스를 구현해서 생성, 인터페이스 타입의 필드, 로컬 변수, 매개변수의 값으로 대입할 수 있음.
- 문법
  new 인터페이스() {
    //필드
    //메소드
  }
중괄호 블록 안의 필드와 메소드는 익명 구현 객체가 가져야 할 멤버로, 중괄호 블록 안에서만 사용할 수 있음.
익명 구현 객체는 인터페이스 타입에 대입되므로 인터페이스 타입에 선언된 멤버만 접근 할 수 있기 때문.
중괄호 블록 안에는 주로 인터페이스의 추상 메소드를 재정의하는 코드.
