sec01. 상속 개념
상속의 개념
  상속은 부모 클래스의 필드와 메소드를 자식 클레스에게 물려주는 것
	<부모 클래스> = [필드1] + [메소드1]			
	<자식 클래스> = [필드1] + [메소드1] + (필드2) + (메소드2)	
	//자신이 갖고 있는 (필드2)와 (메소드2) + 상속 받은 부모 클래스의 [필드1]와 [메소드1]를 추가

상속의 장점
	이미 잘 개발된 클래스를 재사용해서 새로운 클래스를 만들기 때문에 중복되는 코드를 줄여 개발 시간을 단축.
	클래스의 수정을 최소화.

sec02. 클래스 상속
- 문법
	public class 자식클래스 extends 부모클래스 { --- }

주의 할 점
	아래처럼 다중 상속을 허용하지 않음. 즉, 여러 개의 부모 클래스를 상속할 수 없음. 따라서, extends 뒤에는 단 하나의 클래스가 와야함.
	public class 자식클래스 extends 부모클래스1, 부모클래스2 { --- }

sec03. 부모 생성자 호출
자식 객체를 생성하면 부모 객체가 먼저 생성된 다음 자식 객체가 생성.
- 문법
	자식클래스 변수 = new 자식클래스();

모든 객체는 생성자를 호출해야만 생성됨. 부모 생성자는 자식 생성자의 맨 첫 줄에 숨겨져 있는 super()에 의해 호출됨.
-	//자식 생성자 선언
	public 자식클래스( --- ) {
		super();
		---
	}
위 코드에서 super()는 컴파일 과정에서 자동 추가, 이것은 부모의 기본 생성자를 호출. 만약, 부모 클래스에 기본 생성자가 없다면 자식 생성자 선언에서 컴파일 에러가 발생.

부모 클래스에 기본 생성자가 없고, 매개변수를 갖는 생성자만 있다면 super(매개값, ---)코드를 직접 꼭 넣어야 함. 이 코드는 매개값의 타입과 개수가 일치하는 부모 생성자를 호출.
-	//자식 생성자 선언
	public 자식클래스( --- ){
		super(매개값, ---);
		---
	}
  
sec04. 메소드 재정의
메소드 오버라이딩이란? 상속된 메소드를 자식 클래스에서 재정의하는 것.
	만약, 메소드가 오버라이딩 되었다면, 해당 부모 메소드는 숨겨지고, 자식 메소드가 우선적으로 사용.
  class Parent {                          class ChildExample {  
    void method1() { --- } (O)            public static void main(String[] agrs) {
    void method2() { --- } (X)              Child child = new Child();
  }                                         child.method1();  
  class Child extends Parent {              child.method2();  Child에 있는 method2()가 실행됨
    void method2() { --- } (O)              child.method3();
    void method3() { --- } (O)              
  }

메소드 오버라이딩 규칙
	- 부모 메소드의 선언부(리턴 타입, 메소드 이름, 매개 변수)와 동일해야 함.
	- 접근 제한을 더 강하게 오버라이딩할 수 없음.(ex. piblic -> private로 변경 불가)
	- 새로운 예외를 throws할 수 없음

@Override를 붙이면 컴파일 단계에서 정확히 오버라이딩이 되었는지 체크하고, 문제가 있다면 컴파일 에러를 출력.

메소드를 재정의하면 부모 메소드는 숨겨지고, 자식 메소드만 사용되는 경우에서..
ex) 자식 메소드 한줄만 추가하고자 하면 겹치는 부모 메소드를 자식 메소드에 다시 작성해야함.
자식 메소드 내에서 부모 메소드를 호출하는 것으로 해결.
	//부모 메소드 호출 방법
- 문법
	super.메소드();
  메소드를 재정의해서 숨겨진 부모 메소드를 호출할 수 있음.

sec05. final 클래스와 final 메소드
final을 붙이면 초기값 설정 후 값을 변경할 수 없음(상수와 같은 느낌)

final 클래스
 클래스를 선언할 때 final 키워드를 class 앞에 붙이면 최종적인 클래스이므로 더 이상 상속할 수 없는 클래스가 됨. 즉, final 클래스는 부모 클래스가 될 수 없어 자식 클래스를 만들 수 없음.
- 문법
  public final class 클래스 { --- }
- 오류
  public class NewClass extends 클래스 { --- }	//할 수 없음

final 메소드
 메소드를 선언할 때 final 키워드를 붙이면 이 메소드는 최종적인 메소드이므로 오버라이딩할 수 없는 메소드가 됨. 즉, 부모 클래스를 상속해서 자식 클래스를 선언할 때, 부모 클래스에 선언된 final 메소드는 자식 클래스에서 재정의할 수 없음.
pulic final 리턴타입 메소드( 매개변수, --- ) { --- }

sec06. protected 접근 제한자
public과 default의 중간쯤에 해당하는 접근 제한
제한 대상 - 필드, 생성자, 메소드
제한 범위 - 자신과 같은 패키지 이거나, 상속 관계인 자식 객체만 사용 가능.

- package 1
public class A {
	protected 멤버
}
class B { --- }		//같은 패키지라 A의 protected 필드, 생성자, 메소드에 접근 가능

- package 2
class C { --- }		//다른 패키지라 A의 protected 필드, 생성자, 메소드에 접근 불가능
class D extends A { --- }	//다른 패키지지만, 상속 관계라서 A의 protected 필드, 생성자, 메소드에 접근 가능. 단, new 연산자를 사용해서 생산자를 직접 호출할 수는 없고, 자식 생성자에서 super()로 A 생성자를 호출 할 수 있음.

sec07. 타입 변환
타입 변환이란? 타입을 다른 타입으로 변환하는 것
클래스의 타입 변환은 상속 관계에 있는 클래스 사이에서 발생

자동 타입 변환이란? 자동적으로 타입 변환이 일어나는 것
- 문법
  부모타입 변수 = 자식타입객체;	(부모타입으로 자동 타입 변환)
  
ex) Cat cat = new Cat();
    Animal animal = cat;
위 코드에서 cat과 animal 변수는 타입만 다를 뿐, 동일한 Cat 객체를 참조
//cat == animal > true

부모 타입으로 자동 타입 변환된 이후에는 부모 클래스에 선언된 필드와 메소드만이 접근 가능. 변수는 자식 객체를 참조하지만 변수로 접근 가능한 멤버는 부모 클래스 멤버로 한정.
하지만, 자식 클래스에서 오버라이딩된 메소드가 있다면 부모 메소드 대신 오버라이딩 된 메소드가 호출
  class Parent {                          class ChildExample {  
    void method1() { --- } (O)            public static void main(String[] agrs) {
    void method2() { --- } (X)              Child child = new Child();
  }                                         Parent parent = child;
  class Child extends Parent {              parent.method1(); 
    void method2() { --- } (O)              parent.method2();   오버라이딩 된 Child에 있는 method2()가 실행됨
    void method3() { --- } (X)              parent.method3();   parent는 child를 포함하고 있지 않기에 method3()는 실행될 수 없음
  }                                         

강제 타입 변환이란? 자식 타입은 부모 타입으로 자동 변환되지만, 반대로 부모 타입은 자식 타입으로 자동 변환되지 않음. 대신 캐스팅 연산자로 강제 타입 변환을 할 수 있음.
- 문법
  자식타입 변수 = (자식타입)부모타입객체;	(자식타입이 캐스팅 연산자)

자식 객체가 부모 타입으로 자동 변환된 후 다시 자식 타입으로 변환할 때 강제 타입 변환을 사용할 수 있음. (크기를 줄여야 늘릴 수 있음)
ex) Parent parent = new Child();  //자동 타입 변환
    Child child = (Child) parent; //강제 타입 변환
    
자식 객체가 부모 타입으로 자동 변환하면 부모 타입에 선언된 필드와 메소드만 사용 가능하다는 제약 사항이 생김. (크기가 줄어들음)
만약, 자식 타입에 선언된 필드와 메소드를 꼭 사용해야 한다면 강제 타입 변환을 해서 다시 자식 타입으로 변환해야 함. (다시 늘림)
  class Parent {                          class ChildExample {  
    String field1;                          public static void main(String[] agrs) {
    void method1() { --- }                  Parent parent = new Child();  
    void method2() { --- }                  parent.field1 = "xxx";        (O)
  }                                         parent.method1();             (O)
  class Child extends Parent {              parent.method2();             (O)
    String field2;                          parent.field2 = "yyy";        (X)
    void method3() { --- }                  parent.method3();             (X)
  }                                         Child child = (Child) parent; 
                                            child.field2 = "yyy";         (O)
                                            child.method3();              (O)

sec08. 다형성
다형성이란? 사용 방법은 동일하지만 실행 결과가 다양하게 나오는 성질
객체 사용 방법이 동일하다는 것은 동일한 메소드를 가지고 있다는 뜻

다형성을 구현하기 위해서는 자동 타입 변환과 메소드 오버라이딩이 필요.

필드 다형성은 필드 타입은 동일하지만(사용 방법), 대입되는 객체가 달라져서 실행 결과가 다양하게 나올 수 있는 것을 의미
  public class Car {                Car myCar = new Car();
    public Tire tire;               myCar.tire = new HankookTire();
                                    myCar.tire = new KumhoTire();
    public void run() {             HankookTire 와 KumhoTire roll() 메소드를 재정의하고 있다면,
      tire.roll();                  각 다른 실행 결과가 나옴
    }
  }

매개변수 다형성
  다형성은 필드보다는 메소드를 호출할 때 많이 발생. 메소드가 클래스 타입의 매개변수를 가지고 있을 경우, 호출할 때 동일한 타입의 객체를 제공하는 것이 정석이지만 자식 객체를 제공할 수도 있음.
  public class Driver {
    public void drive(Vehicle vehicle) {  //자식 객체 Vehicle
      vehicle.run();                      //자식 객체가 재정의한 run() 메소드 호출
    }
  }

sec09. 객체 타입 확인
- 문법
  boolean result = 객체 instanceof 타입;
좌측의 객체가 우측의 타입이면 true, 그렇지 않으면 false

sec10. 추상 클래스
추상은 실체 간에 공통되는 특성을 추출한 것
추상 클래스란? 객체를 생성할 수 있는 클래스를 실체 클래스라고 한다면, 이 클래스들의 공통적인 필드나 메소드를 추출해서 선언한 클래스를 추상 클래스라고 함.
추상 클래스는 실체 클래스의 부모 역할을 함. 따라서 실체 클래스는 추상 클래스를 상속해서 공통적인 필드나 메소드를 물려받을 수 있음.

추상 클래스는 실체 클래스의 공통되는 필드와 메소드를 추출해서 만들었기 때문에 new 연산자를 사용해서 객체를 직접 생성할 수 없음.
ex) Animal animal = new Animal();   //X
추상 클래스는 새로운 실체 클래스를 만들기 위한 부모 클래스로만 사용. 즉, 추상 클래스는 extends 뒤에만 올 수 있음.
ex) class Fish extends Animal { --- }

선언 방법
  클래스 선언에 abstract 키워드를 붙이면 추상 클래스 선언이 됨. 추상 클래스는 new연산자를 이용해서 객체를 직접 만드는게 아니라, 상속을 통해 자식 클래스만 만들 수 있음.
- 문법
  public abstract class 클래스명 {
    //필드
    //생성자
    //메소드
  }
추상 클래스도 필드 메소드를 선언할 수 있고, 자식 객체가 생성될 때 super()로 추상 클래스의 생성자가 호출되기 때문에 생성자도 반드시 있어야 함.

추상 메소드와 재정의
- 문법
  abstract 리턴타입 메소드명 ( 매개변수, --- );
  
sec11. 봉인된 클래스
기본적으로 final 클래스를 제외한 모든 클래스는 부모 클래스가 될 수 있음. 막 만드는걸 방지하기 위해 봉인된 클래스가 도입.
- 문법
  public sealed class 부모클래스 premits 자식클래스1, 자식클래스2 { --- }    //자식클래스1, 자식클래스2 두 경우만 가능
  
public final class 자식클래스1 extends 부모클래스 { --- }       //더 이상 상속할 수 없다는 뜻  > 더 이상 자식 클래스를 만들 수 없음
public non-sealed class 자식클래스2 extends 부모클래스 { --- }  //봉인을 해제한다는 뜻         > 자식 클래스를 만들 수 있음
