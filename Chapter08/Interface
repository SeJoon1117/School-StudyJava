sec01. 인터페이스 역할
인터페이스는 두 객체를 연결하는 역할

                인
                터        (객체 B)
  <객체 A>       페    
                이        (객체 C)
                스
                
객체 A, B, C가 있다고 가정하고.
만약 인터페이스 없이 <객체 A>가 (객체 B)를 직접 사용하는 와중 (객체 B)가 (객체 C)로 변경된다 하자. <객체 A>의 소스 코드를 (객체 B)에서 (객체 C)로 변경하는 작업이 추가적으로 필요.
<객체 A>가 인터페이스의 메소드를 호출하면 실제로 실행되는 것은 인터페이스 뒤편의 (객체 B)또는 (객체 C)의 메소드 일 것.

sec02. 인터페이스와 구현 클래스 선언
인터페이스는 '~.java' 형태의 소스 파일로 작성되고 '~.class'형태로 컴파일 되기 때문에 물리적 형태는 클래스와 동일. 단, 소스를 작성할 때 선언하는 방법과 구성 멤버가 클래스와 다름.

인터페이스 선언은 class 키워드 대신 interface 키워드를 사용
- 문법
  interface 인터페이스명 { --- }        //default 접근 제한 
  public interface 인터페이스명 { --- } //public 접근 제한
  
- 선언할 수 있는 멤버의 종류
  public interface 인터페이스명 {
    //public 상수 필드
    //public 추상 메소드
    //public 디폴드 메소드
    //public 정적 메소드
    //private 메소드
    //private 정적 메소드
  }

구현 클래스 선언
  객체 A가 인터페이스의 추상 메소드를 호출하면 인터페이스는 객체 B의 메소드를 실행함. 그러기 위해선, 객체 B는 인터페이스에 선언된 추상 메소드와 동일한 선언부를 가진 메소드를 가지고 있어야 함.
- 문법
  public class B implements 인터페이스명 { --- }
객체 B를 인터페이스를 구현한 객체
implements 키워드는 해당 클래스가 인터페이스를 통해 사용할 수 있다는 표시이며, 인터페이스의 추상 메소드를 재정의한 메소드가 있다는 뜻

인터페이스도 하나의 타입이므로 변수의 타입으로 사용 가능. 인터페이스는 참조 타입에 속하므로 인터페이스 변수에는 객체를 참조하고 있지 않단ㄴ 뜻으로 null을 대입 할 수 있음.
  RemoteControl rc;
  RemoteControl rc = null;
  
인터페이스를 통해 구현 객체를 사용하여면, 인터페이스 변수에 구현 객체(번지)를 대입해야 함.
  rc = new Television();
Television 객체를 생성하고 번지를 대입하는 코드.

Television 클래스는 RemoteControl 인터페이스를 구현하고 있으므로 Television 객체를 직접 RemoteControl 변수 rc에 대입할 수 있음.
  rc.turnOn();
인터페이스 변수를 통해 turnOn() 메소드가 호출되면, 실제로 실행되는 것은 Television에서 정의된 turnOn() 메소드.

sec03. 상수 필드
인터페이스는 public static final 특성을 갖는 불변의 상수 필드를 멤버로 가질 수 있음.
- 문법
  [public static final] 타입 상수명 = 값;
인터페이스에 선언된 필드는 모두 public static final 특성을 갖기 때문에 생략하더라도 자동적으로 컴파일 과정에서 붙게 됨.

sec04. 추상 메소드
인터페이스는 구현 클래스가 재정의해야 하는 public 추상 메소드를 멤버를 가질 수 있음.
추상 메소드는 리턴 타입, 메소드명, 매개변수만 기술되고 중괄호 {}를 붙이지 않는 메소드를 말함.
- 문법
  [public abstract] 리턴타입 메소드명( 매개변수, ---);
public abstract를 생략하더라도 컴파일 과정에서 자동으로 붙게 됨.
추상 메소드는 객체 A가 인터페이스를 통해 어떻게 메소드를 호출할 수 있는지 방법을 알려주는 역할.

인터페이스 구현 객체 B는 추상 메소드의 실행부를 갖는 재정의된 메소드가 있어야 함.

주의할 점
  인터페이스의 추상 메소드는 기본적으로 public 접근 제한. 따라서 재정의할 때 public보다 더 낮은 접근 제한으로 재정의 불가. 그래서 재정의되는 메소드에는 모두 public이 추가되어 있음.

인터페이스 변수는 참조 타입이기 때문에 구현 객체가 대입되면 구현 객체의 번지를 저장.
RemoteControl rc;                   RemoteControl rc = new Audio();
rc = new Television();

구현 객체가 대입되면 인터페이스 변수로 추상 메소드를 호출 할 수 있는데, 어떤 구현 객체가 대입되었는지에 따라 실행 내용이 달라짐.

sec05. 디폴트 메소드
  추상 메소드는 실행부(중괄호 {})가 없지만, 디폴트 메소드는 실행부가 있음.
선언 방법은 클래스 메소드와 동일하나, 차이점은 default 키워드가 리턴 타입 앞에 붙음.
- 문법
  [public] default 리턴타입 메소드명( 매개변수, --- ) { --- }
실행부에는 상수 필드를 읽거나 추상 메소드를 호출하는 코드를 작성할 수 있음.
구현 클래스는 디폴트 메소드를 재정의해서 자신에게 맞게 수정할 수 있음.

재정의 시 주의할 점
  public 접근 제한자를 반드시 붙이고, default 키워드를 생략해야 함.

sec06. 정적 메소드




























 
sec07.
sec08. 
sec09. 
sec10. 
sec11. 
sec12. 
